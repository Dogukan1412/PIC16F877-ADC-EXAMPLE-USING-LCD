CCS PCM C Compiler, Version 5.007, 61971               03-Oca-23 21:36

               Filename:   C:\Users\doguk\Desktop\pic_denemeler\adc_pwm_led\main.lst

               ROM used:   1074 words (13%)
                           Largest free fragment is 2048
               RAM used:   13 (4%) at main() level
                           39 (11%) worst case
               Stack used: 0 locations
               Stack size: 8

*
0000:  MOVLW  03
0001:  MOVWF  0A
0002:  GOTO   38C
0003:  NOP
.................... #include <main.h> 
.................... #include <16F877.h> 
.................... //////// Standard Header file for the PIC16F877 device //////////////// 
.................... #device PIC16F877 
0004:  BCF    0A.0
0005:  BCF    0A.1
0006:  BCF    0A.2
0007:  ADDWF  02,F
0008:  RETLW  28
0009:  RETLW  0C
000A:  RETLW  01
000B:  RETLW  06
000C:  DATA A0,20
000D:  DATA C4,21
000E:  DATA A0,1E
000F:  DATA A0,12
0010:  DATA 6C,32
0011:  DATA 00,00
0012:  DATA CC,22
0013:  DATA C4,2F
0014:  DATA D0,37
0015:  DATA F7,32
0016:  DATA F2,1E
0017:  DATA A0,12
0018:  DATA 66,00
*
00F1:  MOVF   0B,W
00F2:  MOVWF  29
00F3:  BCF    0B.7
00F4:  BSF    03.5
00F5:  BSF    03.6
00F6:  BSF    0C.7
00F7:  BSF    0C.0
00F8:  NOP
00F9:  NOP
00FA:  BTFSC  03.0
00FB:  GOTO   123
00FC:  BCF    03.5
00FD:  MOVF   0C,W
00FE:  ANDLW  7F
00FF:  BCF    03.6
0100:  MOVWF  2A
0101:  BSF    03.6
0102:  MOVF   0D,W
0103:  BCF    03.6
0104:  MOVWF  2B
0105:  BSF    03.6
0106:  MOVF   0F,W
0107:  BCF    03.6
0108:  MOVWF  2C
0109:  MOVF   2A,W
010A:  MOVWF  35
010B:  CALL   0C5
010C:  MOVF   2B,W
010D:  BSF    03.6
010E:  MOVWF  0D
010F:  BCF    03.6
0110:  MOVF   2C,W
0111:  BSF    03.6
0112:  MOVWF  0F
0113:  BSF    03.5
0114:  BSF    0C.7
0115:  BSF    0C.0
0116:  NOP
0117:  NOP
0118:  BCF    03.5
0119:  BCF    03.6
011A:  DECFSZ 28,F
011B:  GOTO   11D
011C:  GOTO   120
011D:  BSF    03.5
011E:  BSF    03.6
011F:  GOTO   123
0120:  GOTO   142
0121:  BSF    03.5
0122:  BSF    03.6
0123:  BCF    03.5
0124:  RLF    0C,W
0125:  RLF    0E,W
0126:  ANDLW  7F
0127:  BCF    03.6
0128:  MOVWF  2A
0129:  BSF    03.6
012A:  MOVF   0D,W
012B:  BCF    03.6
012C:  MOVWF  2B
012D:  BSF    03.6
012E:  MOVF   0F,W
012F:  BCF    03.6
0130:  MOVWF  2C
0131:  MOVF   2A,W
0132:  MOVWF  35
0133:  CALL   0C5
0134:  MOVF   2B,W
0135:  BSF    03.6
0136:  MOVWF  0D
0137:  BCF    03.6
0138:  MOVF   2C,W
0139:  BSF    03.6
013A:  MOVWF  0F
013B:  INCF   0D,F
013C:  BTFSC  03.2
013D:  INCF   0F,F
013E:  BCF    03.0
013F:  BCF    03.6
0140:  DECFSZ 28,F
0141:  GOTO   0F4
0142:  BTFSC  29.7
0143:  BSF    0B.7
0144:  RETURN
0145:  CLRF   30
0146:  MOVF   04,W
0147:  MOVWF  2F
0148:  BCF    30.0
0149:  BTFSC  03.7
014A:  BSF    30.0
014B:  BTFSS  29.7
014C:  GOTO   155
014D:  BSF    2F.7
014E:  BTFSS  2F.4
014F:  INCF   2F,F
0150:  COMF   28,F
0151:  COMF   29,F
0152:  INCF   28,F
0153:  BTFSC  03.2
0154:  INCF   29,F
0155:  SWAPF  29,W
0156:  IORLW  F0
0157:  MOVWF  2B
0158:  ADDWF  2B,F
0159:  ADDLW  E2
015A:  MOVWF  2C
015B:  ADDLW  32
015C:  MOVWF  2E
015D:  MOVF   29,W
015E:  ANDLW  0F
015F:  ADDWF  2C,F
0160:  ADDWF  2C,F
0161:  ADDWF  2E,F
0162:  ADDLW  E9
0163:  MOVWF  2D
0164:  ADDWF  2D,F
0165:  ADDWF  2D,F
0166:  SWAPF  28,W
0167:  ANDLW  0F
0168:  ADDWF  2D,F
0169:  ADDWF  2E,F
016A:  RLF    2D,F
016B:  RLF    2E,F
016C:  COMF   2E,F
016D:  RLF    2E,F
016E:  MOVF   28,W
016F:  ANDLW  0F
0170:  ADDWF  2E,F
0171:  RLF    2B,F
0172:  MOVLW  07
0173:  MOVWF  2A
0174:  MOVLW  0A
0175:  ADDWF  2E,F
0176:  DECF   2D,F
0177:  BTFSS  03.0
0178:  GOTO   175
0179:  ADDWF  2D,F
017A:  DECF   2C,F
017B:  BTFSS  03.0
017C:  GOTO   179
017D:  ADDWF  2C,F
017E:  DECF   2B,F
017F:  BTFSS  03.0
0180:  GOTO   17D
0181:  ADDWF  2B,F
0182:  DECF   2A,F
0183:  BTFSS  03.0
0184:  GOTO   181
0185:  MOVLW  2A
0186:  MOVWF  04
0187:  BCF    03.7
0188:  MOVLW  07
0189:  ANDWF  2F,W
018A:  BCF    2F.6
018B:  DECF   04,F
018C:  ANDWF  2F,W
018D:  BTFSS  03.2
018E:  GOTO   196
018F:  BTFSC  2F.4
0190:  INCF   04,F
0191:  BTFSC  2F.4
0192:  GOTO   196
0193:  MOVLW  20
0194:  MOVWF  77
0195:  GOTO   1B3
0196:  ADDWF  04,F
0197:  MOVLW  2E
0198:  SUBWF  04,W
0199:  BTFSC  03.2
019A:  BSF    2F.6
019B:  MOVF   00,W
019C:  MOVWF  77
019D:  BTFSS  03.2
019E:  GOTO   1A7
019F:  BTFSC  2F.6
01A0:  GOTO   1A7
01A1:  BTFSC  2F.4
01A2:  GOTO   1C1
01A3:  BTFSC  2F.3
01A4:  GOTO   1A7
01A5:  MOVLW  20
01A6:  GOTO   1B2
01A7:  BTFSS  2F.7
01A8:  GOTO   1AF
01A9:  MOVLW  2D
01AA:  MOVWF  77
01AB:  DECF   04,F
01AC:  BCF    2F.6
01AD:  BCF    2F.7
01AE:  GOTO   1B3
01AF:  BSF    2F.3
01B0:  BCF    2F.4
01B1:  MOVLW  30
01B2:  ADDWF  77,F
01B3:  CLRF   29
01B4:  MOVF   04,W
01B5:  MOVWF  28
01B6:  BCF    29.0
01B7:  BTFSC  03.7
01B8:  BSF    29.0
01B9:  MOVF   77,W
01BA:  MOVWF  35
01BB:  CALL   0C5
01BC:  MOVF   28,W
01BD:  MOVWF  04
01BE:  BCF    03.7
01BF:  BTFSC  29.0
01C0:  BSF    03.7
01C1:  INCF   04,F
01C2:  BTFSS  2F.6
01C3:  GOTO   197
01C4:  BCF    0A.3
01C5:  BCF    0A.4
01C6:  GOTO   3E5 (RETURN)
01C7:  MOVLW  8E
01C8:  MOVWF  77
01C9:  MOVF   29,W
01CA:  MOVWF  78
01CB:  MOVF   28,W
01CC:  MOVWF  79
01CD:  CLRF   7A
01CE:  MOVF   78,F
01CF:  BTFSS  03.2
01D0:  GOTO   1DB
01D1:  MOVF   79,W
01D2:  MOVWF  78
01D3:  CLRF   79
01D4:  MOVLW  08
01D5:  SUBWF  77,F
01D6:  MOVF   78,F
01D7:  BTFSS  03.2
01D8:  GOTO   1DB
01D9:  CLRF   77
01DA:  GOTO   1E3
01DB:  BCF    03.0
01DC:  BTFSC  78.7
01DD:  GOTO   1E2
01DE:  RLF    79,F
01DF:  RLF    78,F
01E0:  DECF   77,F
01E1:  GOTO   1DB
01E2:  BCF    78.7
01E3:  BCF    0A.3
01E4:  BCF    0A.4
01E5:  GOTO   3EA (RETURN)
01E6:  MOVF   35,W
01E7:  BTFSC  03.2
01E8:  GOTO   256
01E9:  MOVWF  3D
01EA:  MOVF   39,W
01EB:  BTFSC  03.2
01EC:  GOTO   256
01ED:  ADDWF  3D,F
01EE:  BTFSC  03.0
01EF:  GOTO   1F7
01F0:  MOVLW  7F
01F1:  SUBWF  3D,F
01F2:  BTFSS  03.0
01F3:  GOTO   256
01F4:  BTFSC  03.2
01F5:  GOTO   256
01F6:  GOTO   1FB
01F7:  MOVLW  81
01F8:  ADDWF  3D,F
01F9:  BTFSC  03.0
01FA:  GOTO   256
01FB:  MOVF   3D,W
01FC:  MOVWF  77
01FD:  CLRF   78
01FE:  CLRF   79
01FF:  CLRF   7A
0200:  MOVF   36,W
0201:  MOVWF  41
0202:  BSF    41.7
0203:  MOVF   37,W
0204:  MOVWF  40
0205:  MOVF   38,W
0206:  MOVWF  3F
0207:  MOVLW  18
0208:  MOVWF  3D
0209:  CLRF   3E
020A:  BTFSS  3F.0
020B:  GOTO   224
020C:  MOVF   3C,W
020D:  ADDWF  7A,F
020E:  BTFSS  03.0
020F:  GOTO   216
0210:  INCF   79,F
0211:  BTFSS  03.2
0212:  GOTO   216
0213:  INCF   78,F
0214:  BTFSC  03.2
0215:  BSF    3E.7
0216:  MOVF   3B,W
0217:  ADDWF  79,F
0218:  BTFSS  03.0
0219:  GOTO   21D
021A:  INCF   78,F
021B:  BTFSC  03.2
021C:  BSF    3E.7
021D:  MOVF   3A,W
021E:  MOVWF  37
021F:  BSF    37.7
0220:  MOVF   37,W
0221:  ADDWF  78,F
0222:  BTFSC  03.0
0223:  BSF    3E.7
0224:  RLF    3E,F
0225:  RRF    78,F
0226:  RRF    79,F
0227:  RRF    7A,F
0228:  RRF    41,F
0229:  RRF    40,F
022A:  RRF    3F,F
022B:  BCF    03.0
022C:  DECFSZ 3D,F
022D:  GOTO   209
022E:  MOVLW  01
022F:  ADDWF  77,F
0230:  BTFSC  03.0
0231:  GOTO   256
0232:  BTFSC  78.7
0233:  GOTO   23B
0234:  RLF    41,F
0235:  RLF    7A,F
0236:  RLF    79,F
0237:  RLF    78,F
0238:  DECF   77,F
0239:  BTFSC  03.2
023A:  GOTO   256
023B:  BTFSS  41.7
023C:  GOTO   24C
023D:  INCF   7A,F
023E:  BTFSS  03.2
023F:  GOTO   24C
0240:  INCF   79,F
0241:  BTFSS  03.2
0242:  GOTO   24C
0243:  INCF   78,F
0244:  BTFSS  03.2
0245:  GOTO   24C
0246:  RRF    78,F
0247:  RRF    79,F
0248:  RRF    7A,F
0249:  INCF   77,F
024A:  BTFSC  03.2
024B:  GOTO   256
024C:  MOVF   36,W
024D:  MOVWF  3E
024E:  MOVF   3A,W
024F:  XORWF  3E,F
0250:  BTFSS  3E.7
0251:  GOTO   254
0252:  BSF    78.7
0253:  GOTO   25A
0254:  BCF    78.7
0255:  GOTO   25A
0256:  CLRF   77
0257:  CLRF   78
0258:  CLRF   79
0259:  CLRF   7A
025A:  RETURN
025B:  BTFSC  03.1
025C:  GOTO   260
025D:  MOVLW  3D
025E:  MOVWF  04
025F:  BCF    03.7
0260:  CLRF   77
0261:  CLRF   78
0262:  CLRF   79
0263:  CLRF   7A
0264:  CLRF   3D
0265:  CLRF   3E
0266:  CLRF   3F
0267:  CLRF   40
0268:  MOVF   3C,W
0269:  IORWF  3B,W
026A:  IORWF  3A,W
026B:  IORWF  39,W
026C:  BTFSC  03.2
026D:  GOTO   29E
026E:  MOVLW  20
026F:  MOVWF  41
0270:  BCF    03.0
0271:  RLF    35,F
0272:  RLF    36,F
0273:  RLF    37,F
0274:  RLF    38,F
0275:  RLF    3D,F
0276:  RLF    3E,F
0277:  RLF    3F,F
0278:  RLF    40,F
0279:  MOVF   3C,W
027A:  SUBWF  40,W
027B:  BTFSS  03.2
027C:  GOTO   287
027D:  MOVF   3B,W
027E:  SUBWF  3F,W
027F:  BTFSS  03.2
0280:  GOTO   287
0281:  MOVF   3A,W
0282:  SUBWF  3E,W
0283:  BTFSS  03.2
0284:  GOTO   287
0285:  MOVF   39,W
0286:  SUBWF  3D,W
0287:  BTFSS  03.0
0288:  GOTO   298
0289:  MOVF   39,W
028A:  SUBWF  3D,F
028B:  MOVF   3A,W
028C:  BTFSS  03.0
028D:  INCFSZ 3A,W
028E:  SUBWF  3E,F
028F:  MOVF   3B,W
0290:  BTFSS  03.0
0291:  INCFSZ 3B,W
0292:  SUBWF  3F,F
0293:  MOVF   3C,W
0294:  BTFSS  03.0
0295:  INCFSZ 3C,W
0296:  SUBWF  40,F
0297:  BSF    03.0
0298:  RLF    77,F
0299:  RLF    78,F
029A:  RLF    79,F
029B:  RLF    7A,F
029C:  DECFSZ 41,F
029D:  GOTO   270
029E:  MOVF   3D,W
029F:  MOVWF  00
02A0:  INCF   04,F
02A1:  MOVF   3E,W
02A2:  MOVWF  00
02A3:  INCF   04,F
02A4:  MOVF   3F,W
02A5:  MOVWF  00
02A6:  INCF   04,F
02A7:  MOVF   40,W
02A8:  MOVWF  00
02A9:  RETURN
02AA:  MOVF   04,W
02AB:  MOVWF  2D
02AC:  MOVF   2C,W
02AD:  MOVWF  2F
02AE:  BTFSC  03.2
02AF:  GOTO   2C9
02B0:  MOVF   2B,W
02B1:  MOVWF  38
02B2:  MOVF   2A,W
02B3:  MOVWF  37
02B4:  MOVF   29,W
02B5:  MOVWF  36
02B6:  MOVF   28,W
02B7:  MOVWF  35
02B8:  CLRF   3C
02B9:  CLRF   3B
02BA:  MOVLW  20
02BB:  MOVWF  3A
02BC:  MOVLW  82
02BD:  MOVWF  39
02BE:  CALL   1E6
02BF:  MOVF   7A,W
02C0:  MOVWF  2B
02C1:  MOVF   79,W
02C2:  MOVWF  2A
02C3:  MOVF   78,W
02C4:  MOVWF  29
02C5:  MOVF   77,W
02C6:  MOVWF  28
02C7:  DECFSZ 2F,F
02C8:  GOTO   2B0
02C9:  MOVF   2B,W
02CA:  MOVWF  38
02CB:  MOVF   2A,W
02CC:  MOVWF  37
02CD:  MOVF   29,W
02CE:  MOVWF  36
02CF:  MOVF   28,W
02D0:  MOVWF  35
02D1:  MOVF   35,W
02D2:  SUBLW  B6
02D3:  MOVWF  35
02D4:  CLRF   7A
02D5:  MOVF   36,W
02D6:  MOVWF  39
02D7:  BSF    36.7
02D8:  BCF    03.0
02D9:  RRF    36,F
02DA:  RRF    37,F
02DB:  RRF    38,F
02DC:  RRF    7A,F
02DD:  RRF    79,F
02DE:  RRF    78,F
02DF:  RRF    77,F
02E0:  DECFSZ 35,F
02E1:  GOTO   2D8
02E2:  BTFSS  39.7
02E3:  GOTO   2EF
02E4:  COMF   77,F
02E5:  COMF   78,F
02E6:  COMF   79,F
02E7:  COMF   7A,F
02E8:  INCF   77,F
02E9:  BTFSC  03.2
02EA:  INCF   78,F
02EB:  BTFSC  03.2
02EC:  INCF   79,F
02ED:  BTFSC  03.2
02EE:  INCF   7A,F
02EF:  MOVF   7A,W
02F0:  MOVWF  2B
02F1:  MOVF   79,W
02F2:  MOVWF  2A
02F3:  MOVF   78,W
02F4:  MOVWF  29
02F5:  MOVF   77,W
02F6:  MOVWF  28
02F7:  BTFSS  2B.7
02F8:  GOTO   306
02F9:  DECF   2D,F
02FA:  BSF    2D.5
02FB:  COMF   28,F
02FC:  COMF   29,F
02FD:  COMF   2A,F
02FE:  COMF   2B,F
02FF:  INCF   28,F
0300:  BTFSC  03.2
0301:  INCF   29,F
0302:  BTFSC  03.2
0303:  INCF   2A,F
0304:  BTFSC  03.2
0305:  INCF   2B,F
0306:  MOVLW  3B
0307:  MOVWF  34
0308:  MOVLW  9A
0309:  MOVWF  33
030A:  MOVLW  CA
030B:  MOVWF  32
030C:  CLRF   31
030D:  MOVLW  0A
030E:  MOVWF  2F
030F:  MOVF   2C,W
0310:  BTFSC  03.2
0311:  INCF   2D,F
0312:  BSF    03.1
0313:  MOVLW  28
0314:  MOVWF  04
0315:  BCF    03.7
0316:  MOVF   2B,W
0317:  MOVWF  38
0318:  MOVF   2A,W
0319:  MOVWF  37
031A:  MOVF   29,W
031B:  MOVWF  36
031C:  MOVF   28,W
031D:  MOVWF  35
031E:  MOVF   34,W
031F:  MOVWF  3C
0320:  MOVF   33,W
0321:  MOVWF  3B
0322:  MOVF   32,W
0323:  MOVWF  3A
0324:  MOVF   31,W
0325:  MOVWF  39
0326:  CALL   25B
0327:  MOVF   78,W
0328:  MOVF   77,F
0329:  BTFSS  03.2
032A:  GOTO   33E
032B:  INCF   2C,W
032C:  SUBWF  2F,W
032D:  BTFSC  03.2
032E:  GOTO   33E
032F:  MOVF   2D,W
0330:  BTFSC  03.2
0331:  GOTO   340
0332:  ANDLW  0F
0333:  SUBWF  2F,W
0334:  BTFSC  03.2
0335:  GOTO   338
0336:  BTFSC  03.0
0337:  GOTO   370
0338:  BTFSC  2D.7
0339:  GOTO   370
033A:  BTFSC  2D.6
033B:  GOTO   340
033C:  MOVLW  20
033D:  GOTO   36C
033E:  MOVLW  20
033F:  ANDWF  2D,F
0340:  BTFSS  2D.5
0341:  GOTO   34E
0342:  BCF    2D.5
0343:  MOVF   2C,W
0344:  BTFSS  03.2
0345:  DECF   2D,F
0346:  MOVF   77,W
0347:  MOVWF  2D
0348:  MOVLW  2D
0349:  MOVWF  35
034A:  CALL   0C5
034B:  MOVF   2D,W
034C:  MOVWF  77
034D:  CLRF   2D
034E:  MOVF   2C,W
034F:  SUBWF  2F,W
0350:  BTFSS  03.2
0351:  GOTO   35C
0352:  MOVF   77,W
0353:  MOVWF  2D
0354:  MOVLW  2E
0355:  MOVWF  35
0356:  CALL   0C5
0357:  MOVF   2D,W
0358:  MOVWF  77
0359:  MOVLW  20
035A:  ANDWF  2D,F
035B:  MOVLW  00
035C:  MOVLW  30
035D:  BTFSS  2D.5
035E:  GOTO   36C
035F:  BCF    2D.5
0360:  MOVF   2C,W
0361:  BTFSS  03.2
0362:  DECF   2D,F
0363:  MOVF   77,W
0364:  MOVWF  2D
0365:  MOVLW  2D
0366:  MOVWF  35
0367:  CALL   0C5
0368:  MOVF   2D,W
0369:  MOVWF  77
036A:  CLRF   2D
036B:  MOVLW  30
036C:  ADDWF  77,F
036D:  MOVF   77,W
036E:  MOVWF  35
036F:  CALL   0C5
0370:  BCF    03.1
0371:  MOVF   34,W
0372:  MOVWF  38
0373:  MOVF   33,W
0374:  MOVWF  37
0375:  MOVF   32,W
0376:  MOVWF  36
0377:  MOVF   31,W
0378:  MOVWF  35
0379:  CLRF   3C
037A:  CLRF   3B
037B:  CLRF   3A
037C:  MOVLW  0A
037D:  MOVWF  39
037E:  CALL   25B
037F:  MOVF   7A,W
0380:  MOVWF  34
0381:  MOVF   79,W
0382:  MOVWF  33
0383:  MOVF   78,W
0384:  MOVWF  32
0385:  MOVF   77,W
0386:  MOVWF  31
0387:  DECFSZ 2F,F
0388:  GOTO   312
0389:  BCF    0A.3
038A:  BCF    0A.4
038B:  GOTO   41D (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=4MHz) 
*
0019:  MOVLW  36
001A:  MOVWF  04
001B:  BCF    03.7
001C:  MOVF   00,W
001D:  BTFSC  03.2
001E:  GOTO   02D
001F:  MOVLW  01
0020:  MOVWF  78
0021:  CLRF   77
0022:  DECFSZ 77,F
0023:  GOTO   022
0024:  DECFSZ 78,F
0025:  GOTO   021
0026:  MOVLW  4A
0027:  MOVWF  77
0028:  DECFSZ 77,F
0029:  GOTO   028
002A:  GOTO   02B
002B:  DECFSZ 00,F
002C:  GOTO   01F
002D:  RETURN
....................  
....................  
.................... #include "lcd.c" 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
0046:  MOVLW  0F
0047:  BSF    03.5
0048:  ANDWF  08,W
0049:  IORLW  F0
004A:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
004B:  BCF    03.5
004C:  BSF    08.2
....................    delay_cycles(1); 
004D:  NOP
....................    lcd_output_enable(1); 
004E:  BSF    08.0
....................    delay_cycles(1); 
004F:  NOP
....................    high = lcd_read_nibble(); 
0050:  CALL   03A
0051:  MOVF   78,W
0052:  MOVWF  3D
....................        
....................    lcd_output_enable(0); 
0053:  BCF    08.0
....................    delay_cycles(1); 
0054:  NOP
....................    lcd_output_enable(1); 
0055:  BSF    08.0
....................    delay_us(1); 
0056:  NOP
....................    low = lcd_read_nibble(); 
0057:  CALL   03A
0058:  MOVF   78,W
0059:  MOVWF  3C
....................        
....................    lcd_output_enable(0); 
005A:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
005B:  MOVLW  0F
005C:  BSF    03.5
005D:  ANDWF  08,W
005E:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
005F:  BCF    03.5
0060:  SWAPF  3D,W
0061:  MOVWF  77
0062:  MOVLW  F0
0063:  ANDWF  77,F
0064:  MOVF   77,W
0065:  IORWF  3C,W
0066:  MOVWF  78
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
003A:  MOVF   08,W
003B:  MOVWF  77
003C:  SWAPF  08,W
003D:  ANDLW  0F
003E:  MOVWF  78
....................   #endif 
003F:  RETURN
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
002E:  SWAPF  3D,W
002F:  ANDLW  F0
0030:  MOVWF  77
0031:  MOVLW  0F
0032:  ANDWF  08,W
0033:  IORWF  77,W
0034:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0035:  NOP
....................    lcd_output_enable(1); 
0036:  BSF    08.0
....................    delay_us(2); 
0037:  GOTO   038
....................    lcd_output_enable(0); 
0038:  BCF    08.0
0039:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
0040:  BSF    03.5
0041:  BCF    08.0
....................    lcd_rs_tris(); 
0042:  BCF    08.1
....................    lcd_rw_tris(); 
0043:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0044:  BCF    03.5
0045:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
0067:  MOVF   78,W
0068:  MOVWF  3C
0069:  BTFSC  3C.7
006A:  GOTO   046
....................    lcd_output_rs(address); 
006B:  BTFSS  3A.0
006C:  BCF    08.1
006D:  BTFSC  3A.0
006E:  BSF    08.1
....................    delay_cycles(1); 
006F:  NOP
....................    lcd_output_rw(0); 
0070:  BCF    08.2
....................    delay_cycles(1); 
0071:  NOP
....................    lcd_output_enable(0); 
0072:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
0073:  SWAPF  3B,W
0074:  MOVWF  3C
0075:  MOVLW  0F
0076:  ANDWF  3C,F
0077:  MOVF   3C,W
0078:  MOVWF  3D
0079:  CALL   02E
....................    lcd_send_nibble(n & 0xf); 
007A:  MOVF   3B,W
007B:  ANDLW  0F
007C:  MOVWF  3C
007D:  MOVWF  3D
007E:  CALL   02E
007F:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
0080:  MOVLW  0F
0081:  BSF    03.5
0082:  ANDWF  08,W
0083:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
0084:  BCF    08.0
....................    lcd_rs_tris(); 
0085:  BCF    08.1
....................    lcd_rw_tris(); 
0086:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
0087:  BCF    03.5
0088:  BCF    08.1
....................    lcd_output_rw(0); 
0089:  BCF    08.2
....................    lcd_output_enable(0); 
008A:  BCF    08.0
....................      
....................    delay_ms(15); 
008B:  MOVLW  0F
008C:  MOVWF  36
008D:  CALL   019
....................    for(i=1;i<=3;++i) 
008E:  MOVLW  01
008F:  MOVWF  28
0090:  MOVF   28,W
0091:  SUBLW  03
0092:  BTFSS  03.0
0093:  GOTO   09C
....................    { 
....................        lcd_send_nibble(3); 
0094:  MOVLW  03
0095:  MOVWF  3D
0096:  CALL   02E
....................        delay_ms(5); 
0097:  MOVLW  05
0098:  MOVWF  36
0099:  CALL   019
009A:  INCF   28,F
009B:  GOTO   090
....................    } 
....................     
....................    lcd_send_nibble(2); 
009C:  MOVLW  02
009D:  MOVWF  3D
009E:  CALL   02E
....................    delay_ms(5); 
009F:  MOVLW  05
00A0:  MOVWF  36
00A1:  CALL   019
....................    for(i=0;i<=3;++i) 
00A2:  CLRF   28
00A3:  MOVF   28,W
00A4:  SUBLW  03
00A5:  BTFSS  03.0
00A6:  GOTO   0B0
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
00A7:  MOVF   28,W
00A8:  CALL   004
00A9:  MOVWF  29
00AA:  CLRF   3A
00AB:  MOVF   29,W
00AC:  MOVWF  3B
00AD:  CALL   040
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00AE:  INCF   28,F
00AF:  GOTO   0A3
00B0:  BCF    0A.3
00B1:  BCF    0A.4
00B2:  GOTO   3C2 (RETURN)
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
00B3:  DECFSZ 37,W
00B4:  GOTO   0B6
00B5:  GOTO   0B9
....................       address=LCD_LINE_TWO; 
00B6:  MOVLW  40
00B7:  MOVWF  38
00B8:  GOTO   0BA
....................    else 
....................       address=0; 
00B9:  CLRF   38
....................       
....................    address+=x-1; 
00BA:  MOVLW  01
00BB:  SUBWF  36,W
00BC:  ADDWF  38,F
....................    lcd_send_byte(0,0x80|address); 
00BD:  MOVF   38,W
00BE:  IORLW  80
00BF:  MOVWF  39
00C0:  CLRF   3A
00C1:  MOVF   39,W
00C2:  MOVWF  3B
00C3:  CALL   040
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
00C4:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
00C5:  MOVF   35,W
00C6:  XORLW  07
00C7:  BTFSC  03.2
00C8:  GOTO   0D3
00C9:  XORLW  0B
00CA:  BTFSC  03.2
00CB:  GOTO   0D8
00CC:  XORLW  06
00CD:  BTFSC  03.2
00CE:  GOTO   0E0
00CF:  XORLW  02
00D0:  BTFSC  03.2
00D1:  GOTO   0E6
00D2:  GOTO   0EB
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
00D3:  MOVLW  01
00D4:  MOVWF  36
00D5:  MOVWF  37
00D6:  CALL   0B3
00D7:  GOTO   0F0
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
00D8:  CLRF   3A
00D9:  MOVLW  01
00DA:  MOVWF  3B
00DB:  CALL   040
....................                      delay_ms(2); 
00DC:  MOVLW  02
00DD:  MOVWF  36
00DE:  CALL   019
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
00DF:  GOTO   0F0
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
00E0:  MOVLW  01
00E1:  MOVWF  36
00E2:  MOVLW  02
00E3:  MOVWF  37
00E4:  CALL   0B3
00E5:  GOTO   0F0
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
00E6:  CLRF   3A
00E7:  MOVLW  10
00E8:  MOVWF  3B
00E9:  CALL   040
00EA:  GOTO   0F0
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
00EB:  MOVLW  01
00EC:  MOVWF  3A
00ED:  MOVF   35,W
00EE:  MOVWF  3B
00EF:  CALL   040
....................      #endif 
....................    } 
00F0:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... unsigned long int bilgi; 
.................... float power; 
.................... int duty = 0; 
....................  
.................... void main() 
*
038C:  CLRF   26
038D:  MOVLW  FF
038E:  MOVWF  27
038F:  BSF    03.5
0390:  BSF    1F.0
0391:  BSF    1F.1
0392:  BSF    1F.2
0393:  BCF    1F.3
0394:  BCF    03.7
0395:  MOVLW  1F
0396:  ANDWF  03,F
.................... { 
....................    set_tris_a(0x01); 
0397:  MOVLW  01
0398:  MOVWF  05
....................    set_tris_d(0x00); 
0399:  MOVLW  00
039A:  MOVWF  08
....................    set_tris_c(0x00); 
039B:  MOVWF  07
039C:  BCF    03.5
039D:  MOVWF  27
....................     
....................    setup_adc(adc_clock_div_32); 
039E:  BCF    1F.6
039F:  BSF    1F.7
03A0:  BSF    03.5
03A1:  BCF    1F.7
03A2:  BCF    03.5
03A3:  BSF    1F.0
....................    setup_adc_ports(all_analog); 
03A4:  BSF    03.5
03A5:  BCF    1F.0
03A6:  BCF    1F.1
03A7:  BCF    1F.2
03A8:  BCF    1F.3
....................    set_adc_channel(0); 
03A9:  MOVWF  78
03AA:  BCF    03.5
03AB:  MOVF   1F,W
03AC:  ANDLW  C7
03AD:  IORWF  78,W
03AE:  MOVWF  1F
....................     
....................    setup_timer_2(t2_div_by_16,249,1); 
03AF:  MOVLW  00
03B0:  MOVWF  78
03B1:  IORLW  06
03B2:  MOVWF  12
03B3:  MOVLW  F9
03B4:  BSF    03.5
03B5:  MOVWF  12
....................    setup_ccp1(ccp_pwm); 
03B6:  BCF    03.5
03B7:  BCF    27.2
03B8:  MOVF   27,W
03B9:  BSF    03.5
03BA:  MOVWF  07
03BB:  BCF    03.5
03BC:  BCF    07.2
03BD:  MOVLW  0C
03BE:  MOVWF  17
....................    set_pwm1_duty(duty); 
03BF:  MOVF   26,W
03C0:  MOVWF  15
....................     
....................    lcd_init(); 
03C1:  GOTO   080
....................     
....................    delay_us(30); 
03C2:  MOVLW  09
03C3:  MOVWF  77
03C4:  DECFSZ 77,F
03C5:  GOTO   3C4
03C6:  GOTO   3C7
....................     
....................    while(TRUE) 
....................    { 
....................       bilgi = read_adc(); 
03C7:  BSF    1F.2
03C8:  BTFSC  1F.2
03C9:  GOTO   3C8
03CA:  BSF    03.5
03CB:  MOVF   1E,W
03CC:  BCF    03.5
03CD:  MOVWF  20
03CE:  MOVF   1E,W
03CF:  MOVWF  21
....................       lcd_gotoxy(1,1); 
03D0:  MOVLW  01
03D1:  MOVWF  36
03D2:  MOVWF  37
03D3:  CALL   0B3
....................       printf ( lcd_putc , " ADC = %ld",bilgi); 
03D4:  MOVLW  0C
03D5:  BSF    03.6
03D6:  MOVWF  0D
03D7:  MOVLW  00
03D8:  MOVWF  0F
03D9:  BCF    03.0
03DA:  MOVLW  07
03DB:  BCF    03.6
03DC:  MOVWF  28
03DD:  CALL   0F1
03DE:  MOVLW  10
03DF:  MOVWF  04
03E0:  MOVF   21,W
03E1:  MOVWF  29
03E2:  MOVF   20,W
03E3:  MOVWF  28
03E4:  GOTO   145
....................       power = (float)(0.0015258789*bilgi); 
03E5:  MOVF   21,W
03E6:  MOVWF  29
03E7:  MOVF   20,W
03E8:  MOVWF  28
03E9:  GOTO   1C7
03EA:  CLRF   38
03EB:  CLRF   37
03EC:  MOVLW  48
03ED:  MOVWF  36
03EE:  MOVLW  75
03EF:  MOVWF  35
03F0:  MOVF   7A,W
03F1:  MOVWF  3C
03F2:  MOVF   79,W
03F3:  MOVWF  3B
03F4:  MOVF   78,W
03F5:  MOVWF  3A
03F6:  MOVF   77,W
03F7:  MOVWF  39
03F8:  CALL   1E6
03F9:  MOVF   7A,W
03FA:  MOVWF  25
03FB:  MOVF   79,W
03FC:  MOVWF  24
03FD:  MOVF   78,W
03FE:  MOVWF  23
03FF:  MOVF   77,W
0400:  MOVWF  22
....................       lcd_gotoxy(1,2); 
0401:  MOVLW  01
0402:  MOVWF  36
0403:  MOVLW  02
0404:  MOVWF  37
0405:  CALL   0B3
....................       printf ( lcd_putc , "LED_Power= %f",power); 
0406:  MOVLW  12
0407:  BSF    03.6
0408:  MOVWF  0D
0409:  MOVLW  00
040A:  MOVWF  0F
040B:  BCF    03.0
040C:  MOVLW  0B
040D:  BCF    03.6
040E:  MOVWF  28
040F:  CALL   0F1
0410:  MOVLW  89
0411:  MOVWF  04
0412:  MOVF   25,W
0413:  MOVWF  2B
0414:  MOVF   24,W
0415:  MOVWF  2A
0416:  MOVF   23,W
0417:  MOVWF  29
0418:  MOVF   22,W
0419:  MOVWF  28
041A:  MOVLW  02
041B:  MOVWF  2C
041C:  GOTO   2AA
....................       //duty = (power/10); 
....................       set_pwm1_duty(power);  
041D:  MOVF   23,W
041E:  MOVWF  79
041F:  MOVF   22,W
0420:  MOVWF  78
0421:  RRF    79,F
0422:  RRF    78,F
0423:  RRF    79,F
0424:  RRF    78,F
0425:  RRF    79,F
0426:  MOVF   78,W
0427:  MOVWF  15
0428:  RRF    79,F
0429:  RRF    79,W
042A:  ANDLW  30
042B:  MOVWF  77
042C:  MOVF   17,W
042D:  ANDLW  CF
042E:  IORWF  77,W
042F:  MOVWF  17
0430:  GOTO   3C7
....................  
....................        
....................    } 
....................  
.................... } 
0431:  SLEEP

Configuration Fuses:
   Word  1: 3F31   XT NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
